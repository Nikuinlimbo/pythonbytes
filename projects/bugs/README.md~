# PythonBytes Project In-Depth


[Here is a link to this page.](https://github.com/robfatland/pythonbytes/tree/master/projects/bugs#python-project-in-depth)


### Overview


Four bugs -- call them A, B, C, and D -- are at the corners of a square table of side *s*. Each bug
faces the bug at the next corner to their left: A faces B, B faces C, C faces D and D faces A. At a 
signal each begins walking towards the bug they are facing. They take identical-length tiny bug steps
and as you can imagine they must constantly adjust their direction. For example A starts walking towards
B but as B is walking towards C: A will have to adjust her path to the right to keep sighted on B. 


Eventually all of the bugs meet at the center of the table. When they do: How far will each one have
walked? 


This is the basic problem but it has the following conceptual extensions. 


- Suppose two diagonals are drawn on the surface of the square table. It is possible that in pursuing
the next bug each bug may cross over this diagonal. Perhaps even more than once. So then we can ask: 
What is the number of times if any that a bug will cross a diagonal?
- Suppose that there is only one bug and no bugs to pursue. This bug has nothing to do and so walks
a distance of zero. If there are two bugs separated by a distance *s* and they walk towards one 
another then each walks a distance *s/2*. What if the table is an equilateral triangle of side *s* 
and there are three bugs, one at each vertext? Then how far do they walk?
- What if the table is a pentagon with five sides of length *s* and there are five bugs? 
- What if the table is a hexagon? 
- What if the table is a regular n-gon with *n* sides of length *s*? Then how far do the bugs walk
before they meet at the center of the table? 
- What happens if the bugs start out in random locations on some table? Is this interesting or not?
- Same as the previous but each bug's speed is proportional to its distance from the next bug? In
this scenario bugs that are very close to their target bug move slowly and bugs that are far from
their target bug move faster. 



### Details


Pursuit like thi is really easy to do using turtle graphics. There are a number of methods built into turtles that 
enable you to send one turtle towards another. (If you are looking for 'pursuit' notes this is the place. 
(There is a club coil about this.))  The first method of interest is called **towards** and it gives you
a heading as an angle: From one location to another. In our case you can get a heading from one turtle to
another. The second idea is then simply to set the heading of a turtle. You do this using the setheading
method. Here are three lines of code that orient a turtle named bravo towards another turtle named alpha
and then move it in that direction 1 pixel:


```
    heading_from_bravo_towards_alpha = bravo.towards(alpha)
    bravo.setheading(heading_from_bravo_towards_alpha)
    bravo.forward(1)
```

